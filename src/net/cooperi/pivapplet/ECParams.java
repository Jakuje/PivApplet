/*
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * Copyright (c) 2017, Alex Wilson <alex@cooperi.net>
 */

package net.cooperi.pivapplet;

import javacard.security.ECKey;

public class ECParams {
	public final static byte ALG_ECDSA_SHA_256 = (byte)33;
	public final static byte ALG_ECDSA_SHA_384 = (byte)34;

//#if PIV_SUPPORT_EC
	public static final byte[] nistp256_p = {
	    (byte)0xff, (byte)0xff, (byte)0xff, (byte)0xff, (byte)0x0,
	    (byte)0x0, (byte)0x0, (byte)0x1, (byte)0x0, (byte)0x0, (byte)0x0,
	    (byte)0x0, (byte)0x0, (byte)0x0, (byte)0x0, (byte)0x0, (byte)0x0,
	    (byte)0x0, (byte)0x0, (byte)0x0, (byte)0xff, (byte)0xff, (byte)0xff,
	    (byte)0xff, (byte)0xff, (byte)0xff, (byte)0xff, (byte)0xff,
	    (byte)0xff, (byte)0xff, (byte)0xff, (byte)0xff
	};
	public static final byte[] nistp256_a = {
	    (byte)0xff, (byte)0xff, (byte)0xff, (byte)0xff, (byte)0x0,
	    (byte)0x0, (byte)0x0, (byte)0x1, (byte)0x0, (byte)0x0, (byte)0x0,
	    (byte)0x0, (byte)0x0, (byte)0x0, (byte)0x0, (byte)0x0, (byte)0x0,
	    (byte)0x0, (byte)0x0, (byte)0x0, (byte)0xff, (byte)0xff, (byte)0xff,
	    (byte)0xff, (byte)0xff, (byte)0xff, (byte)0xff, (byte)0xff,
	    (byte)0xff, (byte)0xff, (byte)0xff, (byte)0xfc
	};
	public static final byte[] nistp256_b = {
	    (byte)0x5a, (byte)0xc6, (byte)0x35, (byte)0xd8, (byte)0xaa,
	    (byte)0x3a, (byte)0x93, (byte)0xe7, (byte)0xb3, (byte)0xeb,
	    (byte)0xbd, (byte)0x55, (byte)0x76, (byte)0x98, (byte)0x86,
	    (byte)0xbc, (byte)0x65, (byte)0x1d, (byte)0x6, (byte)0xb0,
	    (byte)0xcc, (byte)0x53, (byte)0xb0, (byte)0xf6, (byte)0x3b,
	    (byte)0xce, (byte)0x3c, (byte)0x3e, (byte)0x27, (byte)0xd2,
	    (byte)0x60, (byte)0x4b
	};
	public static final byte[] nistp256_R = {
	    (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0x00,
	    (byte)0x00, (byte)0x00, (byte)0x00, (byte)0xFF, (byte)0xFF,
	    (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF,
	    (byte)0xFF, (byte)0xBC, (byte)0xE6, (byte)0xFA, (byte)0xAD,
	    (byte)0xA7, (byte)0x17, (byte)0x9E, (byte)0x84, (byte)0xF3,
	    (byte)0xB9, (byte)0xCA, (byte)0xC2, (byte)0xFC, (byte)0x63,
	    (byte)0x25, (byte)0x51
	};
	public static final byte[] nistp256_G = {
	    (byte)0x4, (byte)0x6b, (byte)0x17, (byte)0xd1, (byte)0xf2,
	    (byte)0xe1, (byte)0x2c, (byte)0x42, (byte)0x47, (byte)0xf8,
	    (byte)0xbc, (byte)0xe6, (byte)0xe5, (byte)0x63, (byte)0xa4,
	    (byte)0x40, (byte)0xf2, (byte)0x77, (byte)0x3, (byte)0x7d,
	    (byte)0x81, (byte)0x2d, (byte)0xeb, (byte)0x33, (byte)0xa0,
	    (byte)0xf4, (byte)0xa1, (byte)0x39, (byte)0x45, (byte)0xd8,
	    (byte)0x98, (byte)0xc2, (byte)0x96, (byte)0x4f, (byte)0xe3,
	    (byte)0x42, (byte)0xe2, (byte)0xfe, (byte)0x1a, (byte)0x7f,
	    (byte)0x9b, (byte)0x8e, (byte)0xe7, (byte)0xeb, (byte)0x4a,
	    (byte)0x7c, (byte)0xf, (byte)0x9e, (byte)0x16, (byte)0x2b,
	    (byte)0xce, (byte)0x33, (byte)0x57, (byte)0x6b, (byte)0x31,
	    (byte)0x5e, (byte)0xce, (byte)0xcb, (byte)0xb6, (byte)0x40,
	    (byte)0x68, (byte)0x37, (byte)0xbf, (byte)0x51, (byte)0xf5
	};
	public static void setCurveParametersP256(ECKey eckey) {
		eckey.setFieldFP(
		    nistp256_p, (short)0, (short)(nistp256_p.length));
		eckey.setA(nistp256_a, (short)0, (short)(nistp256_a.length));
		eckey.setB(nistp256_b, (short)0, (short)(nistp256_b.length));
		eckey.setG(nistp256_G, (short)0, (short)(nistp256_G.length));
		eckey.setR(nistp256_R, (short)0, (short)(nistp256_R.length));
		//eckey.setK((short)1);
	}

	public static final byte[] nistp384_p = {
		(byte)0xff, (byte)0xff, (byte)0xff, (byte)0xff, (byte)0xff,
		(byte)0xff, (byte)0xff, (byte)0xff, (byte)0xff, (byte)0xff,
		(byte)0xff, (byte)0xff, (byte)0xff, (byte)0xff, (byte)0xff,
		(byte)0xff, (byte)0xff, (byte)0xff, (byte)0xff, (byte)0xff,
		(byte)0xff, (byte)0xff, (byte)0xff, (byte)0xff, (byte)0xff,
		(byte)0xff, (byte)0xff, (byte)0xff, (byte)0xff, (byte)0xff,
		(byte)0xff, (byte)0xfe, (byte)0xff, (byte)0xff, (byte)0xff,
		(byte)0xff, (byte)0x0, (byte)0x0, (byte)0x0, (byte)0x0,
		(byte)0x0, (byte)0x0, (byte)0x0, (byte)0x0, (byte)0xff,
		(byte)0xff, (byte)0xff, (byte)0xff
	    };
	    public static final byte[] nistp384_a = {
		(byte)0xff, (byte)0xff, (byte)0xff, (byte)0xff, (byte)0xff,
		(byte)0xff, (byte)0xff, (byte)0xff, (byte)0xff, (byte)0xff,
		(byte)0xff, (byte)0xff, (byte)0xff, (byte)0xff, (byte)0xff,
		(byte)0xff, (byte)0xff, (byte)0xff, (byte)0xff, (byte)0xff,
		(byte)0xff, (byte)0xff, (byte)0xff, (byte)0xff, (byte)0xff,
		(byte)0xff, (byte)0xff, (byte)0xff, (byte)0xff, (byte)0xff,
		(byte)0xff, (byte)0xfe, (byte)0xff, (byte)0xff, (byte)0xff,
		(byte)0xff, (byte)0x0, (byte)0x0, (byte)0x0, (byte)0x0,
		(byte)0x0, (byte)0x0, (byte)0x0, (byte)0x0, (byte)0xff,
		(byte)0xff, (byte)0xff, (byte)0xfc
	    };
	    public static final byte[] nistp384_b = {
		(byte)0xb3, (byte)0x31, (byte)0x2f, (byte)0xa7, (byte)0xe2,
		(byte)0x3e, (byte)0xe7, (byte)0xe4, (byte)0x98, (byte)0x8e,
		(byte)0x5, (byte)0x6b, (byte)0xe3, (byte)0xf8, (byte)0x2d,
		(byte)0x19, (byte)0x18, (byte)0x1d, (byte)0x9c, (byte)0x6e,
		(byte)0xfe, (byte)0x81, (byte)0x41, (byte)0x12, (byte)0x3,
		(byte)0x14, (byte)0x8, (byte)0x8f, (byte)0x50, (byte)0x13,
		(byte)0x87, (byte)0x5a, (byte)0xc6, (byte)0x56, (byte)0x39,
		(byte)0x8d, (byte)0x8a, (byte)0x2e, (byte)0xd1, (byte)0x9d,
		(byte)0x2a, (byte)0x85, (byte)0xc8, (byte)0xed, (byte)0xd3,
		(byte)0xec, (byte)0x2a, (byte)0xef
	    };
	    public static final byte[] nistp384_R = {
		(byte)0xff, (byte)0xff, (byte)0xff, (byte)0xff, (byte)0xff,
		(byte)0xff, (byte)0xff, (byte)0xff, (byte)0xff, (byte)0xff,
		(byte)0xff, (byte)0xff, (byte)0xff, (byte)0xff, (byte)0xff,
		(byte)0xff, (byte)0xff, (byte)0xff, (byte)0xff, (byte)0xff,
		(byte)0xff, (byte)0xff, (byte)0xff, (byte)0xff, (byte)0xc7,
		(byte)0x63, (byte)0x4d, (byte)0x81, (byte)0xf4, (byte)0x37,
		(byte)0x2d, (byte)0xdf, (byte)0x58, (byte)0x1a, (byte)0xd,
		(byte)0xb2, (byte)0x48, (byte)0xb0, (byte)0xa7, (byte)0x7a,
		(byte)0xec, (byte)0xec, (byte)0x19, (byte)0x6a, (byte)0xcc,
		(byte)0xc5, (byte)0x29, (byte)0x73
	    };
	    public static final byte[] nistp384_G = {
		(byte)0x4, (byte)0xaa, (byte)0x87, (byte)0xca, (byte)0x22,
		(byte)0xbe, (byte)0x8b, (byte)0x5, (byte)0x37, (byte)0x8e,
		(byte)0xb1, (byte)0xc7, (byte)0x1e, (byte)0xf3, (byte)0x20,
		(byte)0xad, (byte)0x74, (byte)0x6e, (byte)0x1d, (byte)0x3b,
		(byte)0x62, (byte)0x8b, (byte)0xa7, (byte)0x9b, (byte)0x98,
		(byte)0x59, (byte)0xf7, (byte)0x41, (byte)0xe0, (byte)0x82,
		(byte)0x54, (byte)0x2a, (byte)0x38, (byte)0x55, (byte)0x2,
		(byte)0xf2, (byte)0x5d, (byte)0xbf, (byte)0x55, (byte)0x29,
		(byte)0x6c, (byte)0x3a, (byte)0x54, (byte)0x5e, (byte)0x38,
		(byte)0x72, (byte)0x76, (byte)0xa, (byte)0xb7, (byte)0x36,
		(byte)0x17, (byte)0xde, (byte)0x4a, (byte)0x96, (byte)0x26,
		(byte)0x2c, (byte)0x6f, (byte)0x5d, (byte)0x9e, (byte)0x98,
		(byte)0xbf, (byte)0x92, (byte)0x92, (byte)0xdc, (byte)0x29,
		(byte)0xf8, (byte)0xf4, (byte)0x1d, (byte)0xbd, (byte)0x28,
		(byte)0x9a, (byte)0x14, (byte)0x7c, (byte)0xe9, (byte)0xda,
		(byte)0x31, (byte)0x13, (byte)0xb5, (byte)0xf0, (byte)0xb8,
		(byte)0xc0, (byte)0xa, (byte)0x60, (byte)0xb1, (byte)0xce,
		(byte)0x1d, (byte)0x7e, (byte)0x81, (byte)0x9d, (byte)0x7a,
		(byte)0x43, (byte)0x1d, (byte)0x7c, (byte)0x90, (byte)0xea,
		(byte)0xe, (byte)0x5f
	    };
	    public static void setCurveParametersP384(ECKey eckey) {
		eckey.setFieldFP(
		    nistp384_p, (short)0, (short)(nistp384_p.length));
		eckey.setA(nistp384_a, (short)0, (short)(nistp384_a.length));
		eckey.setB(nistp384_b, (short)0, (short)(nistp384_b.length));
		eckey.setG(nistp384_G, (short)0, (short)(nistp384_G.length));
		eckey.setR(nistp384_R, (short)0, (short)(nistp384_R.length));
		//eckey.setK((short)1);
	}
//#endif
}
